// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenID(): BigInt | null {
    let value = this.get("tokenID");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenID(value: BigInt | null) {
    if (value === null) {
      this.unset("tokenID");
    } else {
      this.set("tokenID", Value.fromBigInt(value as BigInt));
    }
  }

  get nftAddress(): Bytes | null {
    let value = this.get("nftAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set nftAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("nftAddress");
    } else {
      this.set("nftAddress", Value.fromBytes(value as Bytes));
    }
  }

  get ownerAddress(): Bytes | null {
    let value = this.get("ownerAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set ownerAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("ownerAddress");
    } else {
      this.set("ownerAddress", Value.fromBytes(value as Bytes));
    }
  }

  get value(): BigInt | null {
    let value = this.get("value");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt | null) {
    if (value === null) {
      this.unset("value");
    } else {
      this.set("value", Value.fromBigInt(value as BigInt));
    }
  }

  get firstTime(): BigInt | null {
    let value = this.get("firstTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set firstTime(value: BigInt | null) {
    if (value === null) {
      this.unset("firstTime");
    } else {
      this.set("firstTime", Value.fromBigInt(value as BigInt));
    }
  }

  get latestTime(): BigInt | null {
    let value = this.get("latestTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestTime(value: BigInt | null) {
    if (value === null) {
      this.unset("latestTime");
    } else {
      this.set("latestTime", Value.fromBigInt(value as BigInt));
    }
  }

  get prevOwnerAddress(): Bytes | null {
    let value = this.get("prevOwnerAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set prevOwnerAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("prevOwnerAddress");
    } else {
      this.set("prevOwnerAddress", Value.fromBytes(value as Bytes));
    }
  }

  get firstAddress(): Bytes | null {
    let value = this.get("firstAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set firstAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("firstAddress");
    } else {
      this.set("firstAddress", Value.fromBytes(value as Bytes));
    }
  }

  get soldTime(): BigInt | null {
    let value = this.get("soldTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set soldTime(value: BigInt | null) {
    if (value === null) {
      this.unset("soldTime");
    } else {
      this.set("soldTime", Value.fromBigInt(value as BigInt));
    }
  }

  get numOwners(): BigInt | null {
    let value = this.get("numOwners");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numOwners(value: BigInt | null) {
    if (value === null) {
      this.unset("numOwners");
    } else {
      this.set("numOwners", Value.fromBigInt(value as BigInt));
    }
  }

  get owners(): Array<string> | null {
    let value = this.get("owners");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set owners(value: Array<string> | null) {
    if (value === null) {
      this.unset("owners");
    } else {
      this.set("owners", Value.fromStringArray(value as Array<string>));
    }
  }

  get actor(): Bytes | null {
    let value = this.get("actor");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set actor(value: Bytes | null) {
    if (value === null) {
      this.unset("actor");
    } else {
      this.set("actor", Value.fromBytes(value as Bytes));
    }
  }
}

export class Ownership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Ownership entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Ownership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Ownership", id.toString(), this);
  }

  static load(id: string): Ownership | null {
    return store.get("Ownership", id) as Ownership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenID(): string {
    let value = this.get("tokenID");
    return value.toString();
  }

  set tokenID(value: string) {
    this.set("tokenID", Value.fromString(value));
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (value === null) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(value as Bytes));
    }
  }

  get ownerNum(): BigInt {
    let value = this.get("ownerNum");
    return value.toBigInt();
  }

  set ownerNum(value: BigInt) {
    this.set("ownerNum", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class Owner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Owner entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Owner entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Owner", id.toString(), this);
  }

  static load(id: string): Owner | null {
    return store.get("Owner", id) as Owner | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }
}
