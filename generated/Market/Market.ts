// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AskPriceSet extends ethereum.Event {
  get params(): AskPriceSet__Params {
    return new AskPriceSet__Params(this);
  }
}

export class AskPriceSet__Params {
  _event: AskPriceSet;

  constructor(event: AskPriceSet) {
    this._event = event;
  }

  get _actor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MetaTransactionExecuted extends ethereum.Event {
  get params(): MetaTransactionExecuted__Params {
    return new MetaTransactionExecuted__Params(this);
  }
}

export class MetaTransactionExecuted__Params {
  _event: MetaTransactionExecuted;

  constructor(event: MetaTransactionExecuted) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get relayerAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class NFTAddressSet extends ethereum.Event {
  get params(): NFTAddressSet__Params {
    return new NFTAddressSet__Params(this);
  }
}

export class NFTAddressSet__Params {
  _event: NFTAddressSet;

  constructor(event: NFTAddressSet) {
    this._event = event;
  }

  get _address(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Sold extends ethereum.Event {
  get params(): Sold__Params {
    return new Sold__Params(this);
  }
}

export class Sold__Params {
  _event: Sold;

  constructor(event: Sold) {
    this._event = event;
  }

  get _actor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Market extends ethereum.SmartContract {
  static bind(address: Address): Market {
    return new Market("Market", address);
  }

  NFT_ADDRESS(): Address {
    let result = super.call("NFT_ADDRESS", "NFT_ADDRESS():(address)", []);

    return result[0].toAddress();
  }

  try_NFT_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall("NFT_ADDRESS", "NFT_ADDRESS():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getChainID(): BigInt {
    let result = super.call("getChainID", "getChainID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getChainID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getChainID", "getChainID():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNonce(user: Address): BigInt {
    let result = super.call("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getNonce(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  verify(
    owner: Address,
    nonce: BigInt,
    chainID: BigInt,
    functionSignature: Bytes,
    sigR: Bytes,
    sigS: Bytes,
    sigV: i32
  ): boolean {
    let result = super.call(
      "verify",
      "verify(address,uint256,uint256,bytes,bytes32,bytes32,uint8):(bool)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(chainID),
        ethereum.Value.fromBytes(functionSignature),
        ethereum.Value.fromFixedBytes(sigR),
        ethereum.Value.fromFixedBytes(sigS),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(sigV))
      ]
    );

    return result[0].toBoolean();
  }

  try_verify(
    owner: Address,
    nonce: BigInt,
    chainID: BigInt,
    functionSignature: Bytes,
    sigR: Bytes,
    sigS: Bytes,
    sigV: i32
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verify",
      "verify(address,uint256,uint256,bytes,bytes32,bytes32,uint8):(bool)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(chainID),
        ethereum.Value.fromBytes(functionSignature),
        ethereum.Value.fromFixedBytes(sigR),
        ethereum.Value.fromFixedBytes(sigS),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(sigV))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdraw(amount: BigInt): boolean {
    let result = super.call("withdraw", "withdraw(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_withdraw(amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("withdraw", "withdraw(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAsk(tokenID: BigInt): BigInt {
    let result = super.call("getAsk", "getAsk(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenID)
    ]);

    return result[0].toBigInt();
  }

  try_getAsk(tokenID: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getAsk", "getAsk(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ExecuteMetaTransactionCall extends ethereum.Call {
  get inputs(): ExecuteMetaTransactionCall__Inputs {
    return new ExecuteMetaTransactionCall__Inputs(this);
  }

  get outputs(): ExecuteMetaTransactionCall__Outputs {
    return new ExecuteMetaTransactionCall__Outputs(this);
  }
}

export class ExecuteMetaTransactionCall__Inputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sigR(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get sigS(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get sigV(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class ExecuteMetaTransactionCall__Outputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class SetNFTAddressCall extends ethereum.Call {
  get inputs(): SetNFTAddressCall__Inputs {
    return new SetNFTAddressCall__Inputs(this);
  }

  get outputs(): SetNFTAddressCall__Outputs {
    return new SetNFTAddressCall__Outputs(this);
  }
}

export class SetNFTAddressCall__Inputs {
  _call: SetNFTAddressCall;

  constructor(call: SetNFTAddressCall) {
    this._call = call;
  }

  get _contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNFTAddressCall__Outputs {
  _call: SetNFTAddressCall;

  constructor(call: SetNFTAddressCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetAskCall extends ethereum.Call {
  get inputs(): SetAskCall__Inputs {
    return new SetAskCall__Inputs(this);
  }

  get outputs(): SetAskCall__Outputs {
    return new SetAskCall__Outputs(this);
  }
}

export class SetAskCall__Inputs {
  _call: SetAskCall;

  constructor(call: SetAskCall) {
    this._call = call;
  }

  get tokenID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetAskCall__Outputs {
  _call: SetAskCall;

  constructor(call: SetAskCall) {
    this._call = call;
  }
}

export class RemoveAskCall extends ethereum.Call {
  get inputs(): RemoveAskCall__Inputs {
    return new RemoveAskCall__Inputs(this);
  }

  get outputs(): RemoveAskCall__Outputs {
    return new RemoveAskCall__Outputs(this);
  }
}

export class RemoveAskCall__Inputs {
  _call: RemoveAskCall;

  constructor(call: RemoveAskCall) {
    this._call = call;
  }

  get tokenID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveAskCall__Outputs {
  _call: RemoveAskCall;

  constructor(call: RemoveAskCall) {
    this._call = call;
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get tokenID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }
}
